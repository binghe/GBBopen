
                                GBBopen (0.9.5)
                                ---------------

Requirements:

 - GBBopen is written in ANSI Common Lisp with some MOP and vendor-specific
   extensions.  GBBopen has been ported to following Common Lisp
   implementations:

       Allegro CL   (Version 8.0)
       CLISP        (Version 2.41)
       CMUCL        (Version 19d)
       Digitool MCL (Version 5.1)
       ECL          (Version 0.9i)
       Lispworks    (Version 5.0.2)
       OpenMCL      (Version 1.0)
       SBCL         (Version 1.0.5)
       Scieneer CL  (Version 1.3.2)

   GBBopen on ECL (Version 0.9i) requires --enable-threads=yes.
 
   Ports of GBBopen to Corman Common Lisp (Version 3.0), and GCL
   (Version 2.7.0 with --enable-ansi) are incomplete (due to limitations 
   in the MOP support in these implementations).  The latest GCL tested was
   obtained using:
      # export CVSROOT=:pserver:anonymous@cvs.sv.gnu.org:/sources/gcl
      # cvs -z9 -q co -d gcl-2.7.0t5 -r Version_2_7_0t5 gcl

   See PORTING for information on porting GBBopen to other Common Lisp
   implementations.

Current Status Notes (April 28, 2007):

 - Implementation work is progressing on a regular basis.  See the list
   of pending development activities maintained on the "What's New"
   page on the GBBopen Project web site (http://GBBopen.org/) for the
   latest information.  GBBopen users are encouraged to update their
   GBBopen installation frequently.


STEP 1: Getting GBBopen
=======================

The latest source-repository snapshot archive (containing the files in the
GBBopen repository as well as the GBBopen hyperdoc files and the GBBopen
Reference Manual) can be found in the "Downloads" section of the GBBopen web
site (http://GBBopen.org). The repository is maintained using Subversion,
which is available at http://subversion.tigris.org/.  The SVN snapshot
archive includes .svn administrative directories, so a subversion update
command can be used to freshen sources obtained from a snapshot archive.


SVN Access
----------

You can also get the very latest GBBopen sources directly via SVN by issuing
the following command:

  $ svn co http://GBBopen.org/svn/GBBopen/trunk/ GBBopen

A directory tree rooted at the directory named 'GBBopen' will be created. At
any later time, you can issue the command:

  $ svn update

from within that directory tree.  


Browsing the GBBopen Repository
-------------------------------

The GBBopen repository can also be browsed directly at
http://GBBopen.org/svn/GBBopen/trunk/.


STEP 2: Compiling/Loading GBBopen Modules
=========================================

GBBopen includes a mini-module system (a very simple defsystem) that
supports compiling and loading GBBopen components.  To compile all core
GBBopen modules and a simple trip-tests file, evaluate the following within
your Common Lisp environment:

   > (load "<install-dir>/startup.lisp")
   ;; Loading <install-dir>/startup.lisp
   ;;  Loading <install-dir>/source/mini-module/mini-module-loader.lisp
   ;;   Loading <install-dir>/source/mini-module/mini-module.lisp
   ;;  Loading <install-dir>/source/modules.lisp
   t
   > (mini-module:compile-module :gbbopen-test :propagate :create-dirs)
        ...
   ;; Running basic GBBopen tests...
        ...
   ;; Performing Common Lisp capability checks...
        ...
   >

That's it.  GBBopen should compile, load, and run the basic trip tests
without error.

If you want to test GBBopen's Agenda Shell, evaluate:

   > (mini-module:compile-module :agenda-shell-test :propagate :create-dirs)
        ...
   ;; Control shell exited: 10 cycles completed
   ;; Run time: 0.04 seconds
   ;; Elapsed time: 0 seconds
   ;;; Agenda Shell Test Completed
   :quiescence
   >

Again, the test should run without errors.


STEP 3: Compiling All GBBopen Modules
=====================================

If others will be using the GBBopen installation and they do not have write
permission to the compiled GBBopen directories, you should compile all of
the GBBopen modules whenever you install or update GBBopen.  To compile all
GBBopen modules, perform the following in a fresh Common Lisp environment:

   > (load "<install-dir>/gbbopen-init.lisp")
   ;; Loading <install-dir>/gbbopen-init.lisp
   ;;  Loading <install-dir>/extended-repl.lisp
   ;;  Loading <install-dir>/gbbopen-toplevel-commands.lisp
   t
   > (compile-gbbopen)
   ;; Loading <install-dir>/startup.lisp
      ...
   ;;; GBBopen module compilation completed.
   >

All GBBopen modules should compile without error.


GBBopen Tutorial
================

We highly recommend taking a walk through the GBBopen Tutorial.  (You'll get
the pun once you've done so.)  The tutorial shows you how to get started
using GBBopen through a series of exercises that cover GBBopen's concepts
and features in a step-by-step sequence.


Some Useful Things
==================

(You did work through the GBBopen Tutorial, didn't you?)

The file <install-directory>gbbopen-init.lisp is an alternative for
<install-directory>startup.lisp that adds some handy GBBopen keyword
commands to the top-level listener for Allegro CL, CLISP, CMUCL, SCL, ECL,
Lispworks, OpenMCL, SLIME, and SBCL users and defines equivalent functions
(in the :common-lisp-user package) on all Common Lisp implementations.
Simply load gbbopen-init.lisp from your personal Common Lisp initialization
file.  (You do not need to explicitly load the startup.lisp file when using
gbbopen-init.lisp--it will handle the loading of startup.lisp for you.)


Personal gbbopen-init.lisp file
-------------------------------

If a gbbopen-init.lisp file (source or compiled) is present in the user's
"home" directory (as defined by user-homedir-pathname), it is loaded at the
end of loading the <install-directory>startup.lisp file.  A personal
gbbopen-init file is useful for specifying GBBopen parameters and other
personalizations.


Personal gbbopen-commands.lisp file
---------------------------------------

If a gbbopen-commands.lisp file (source or compiled) is present in the user's
"home" directory, it is loaded at the end of loading the
<install-directory>gbbopen-init.lisp file and gbbopen-modules directory files.
A personal gbbopen-commands file is useful for defining user-specific
top-level (REPL) commands for compiling and loading user-specific modules and
other common activities.  See the "Starting Up" section in the GBBopen
Reference Manual for details.


Personal gbbopen-modules directory
----------------------------------

If a gbbopen-modules directory is present in the user's home directory, it is
assumed to contain symbolic links (or "pseudo-symbolic-link" files on Windows)
to individual GBBopen module directory trees.  Each module directory tree can
contain:

  * a commands.lisp file that specifies top-level commands (loaded after the
    personal gbbopen-commands.lisp file if there is one in the user's 
    home directory)

  * a modules.lisp file containing module definitions (loaded after the
    personal gbbopen-init.lisp file if there is one in the user's home 
    directory)

  * a subdirectory named source containing all the additional source
    files for the module or application

This is the recommended mechanism for managing and sharing multiple
user-defined GBBopen modules and applications.  It is very easy to use and
share modules defined in this way by placing symbolic links to the module
directories in your personal gbbopen-modules directory.  Windows,
unfortunately, is the exception to this as Windows does not provide symbolic
links.  GBBopen users running on Windows must create a text file of type .sym
(containing target directory path as its sole line) as a stand-in for the
symbolic link. Once again, see the "Starting Up" section in the GBBopen
Reference Manual for details.


GBBopen Hyperdoc
----------------

Convenient access to a local copy of the GBBopen Hyperdoc manual from Common
Lisp is available by using the browse-hyperdoc function.  Emacs access to
the GBBopen Hyperdoc is provided by <install-directory>browse-hyperdoc.el.
This file defines the interactive Emacs command browse-hyperdoc and binds it
to META-?.  To enable this command, load browse-hyperdoc.el from your .emacs
initialization file.  Highly recommended!


Use the Source!
---------------

You're read this far, so why stop now?  A major benefit of open source is
that the GBBopen code is available for all to see.  If you are curious about
how some capability is implemented, read on!  If the documentation leaves
you with some questions, please tell us about them--but go to the source and
read on!  The power of meta-point (META-.) awaits you...

There are certainly some warts in the code (including code written for
expediency that awaits revisiting), but there is also GBBopen code that is
exquisite in its clarity, simplicity, and efficiency.  Reading code written
by others is a great way to understand how a system works and to extend and
improve your own programming skills. Of course you should not assume that
the specifics of GBBopen's implementation are invarient; we retain the
flexibility to change undocumented implementation details and behavior
without notice.

We are always seeking to improve the GBBopen code base, so if you notice
something that could be done better while looking at the code, please let us
know.  Code improvements and suggestions (and questions) are welcomed at
comments@GBBopen.org.  Unless you request anonymity, we'll attach your name
to committed enhancements (it won't buy lunch, but we're happy to provide a
morsel of acknowledgment).

==============================================================================



